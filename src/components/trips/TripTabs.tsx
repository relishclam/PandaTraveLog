'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/Button';
import { formatDate } from '@/lib/utils';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/Tabs';
import type { Trip } from '@/types/trip';

interface TripTabsProps {
  trips: Trip[];
  onDeleteTrip: (id: string) => Promise<void>;
}

export default function TripTabs({ trips, onDeleteTrip }: TripTabsProps) {
  const [activeTab, setActiveTab] = useState<'manual' | 'ai'>('manual');

  // Filter trips based on type
  const manualTrips = trips.filter(trip => {
    return trip.description?.includes('Manual entry') || 
           (!trip.description?.includes('AI-generated') && !trip.description?.includes('Generated by AI'));
  });

  const aiTrips = trips.filter(trip => {
    return trip.description?.includes('AI-generated') || 
           trip.description?.includes('Generated by AI') ||
           (!trip.description?.includes('Manual entry') && trip.description?.includes('itinerary'));
  });

  const renderTripCard = (trip: Trip, isManual: boolean) => (
    <div key={trip.id} className="bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 overflow-hidden">
      <div className={`h-48 bg-gradient-to-br ${isManual ? 'from-green-400 via-blue-500 to-teal-500' : 'from-purple-400 via-pink-500 to-red-500'} relative`}>
        <div className="absolute inset-0 bg-black bg-opacity-20"></div>
        <div className="absolute top-4 right-4">
          <span className={`${isManual ? 'bg-green-500' : 'bg-purple-500'} text-white px-2 py-1 rounded-full text-xs font-medium`}>
            {isManual ? 'Manual' : 'AI Generated'}
          </span>
        </div>
        <div className="absolute bottom-4 left-4 text-white">
          <h3 className="text-xl font-bold mb-1">{trip.title}</h3>
          <p className="text-blue-100 flex items-center">
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            {trip.destination}
          </p>
        </div>
      </div>
      
      <div className="p-6">
        <div className="flex items-center text-gray-600 mb-4">
          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <span>
            {formatDate(trip.start_date)} - {formatDate(trip.end_date)}
          </span>
        </div>
        
        <div className="flex justify-between">
          <Button
            href={isManual ? `/trips/${trip.id}/diary` : `/trips/${trip.id}`}
            variant="default"
            className={`flex-1 mr-2 ${isManual ? 'bg-green-600 hover:bg-green-700' : 'bg-purple-600 hover:bg-purple-700'}`}
          >
            {isManual ? 'View Diary' : 'View Details'}
          </Button>
          
          <Button
            variant="outline"
            className="text-red-500 border-red-300 hover:bg-red-50"
            onClick={() => onDeleteTrip(trip.id)}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </Button>
        </div>
      </div>
    </div>
  );

  const renderEmptyState = (isManual: boolean) => (
    <div className="text-center py-12">
      <div className="text-gray-400 mb-6">
        <svg className="w-24 h-24 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d={isManual ? "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" : "M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"} />
        </svg>
        <h3 className="text-2xl font-semibold text-gray-600 mb-2">
          {isManual ? 'No manual trips yet' : 'No AI-generated trips yet'}
        </h3>
        <p className="text-gray-500 mb-6">
          {isManual ? 'Create your first manually planned trip!' : 'Let PO Assistant help you plan your next adventure!'}
        </p>
      </div>
    </div>
  );

  return (
    <div>
      {/* Trip Tabs */}
      <div className="mb-6">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            <button
              onClick={() => setActiveTab('manual')}
              className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors duration-200 ${
                activeTab === 'manual'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <div className="flex items-center space-x-2">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                <span>Manual Entries ({manualTrips.length})</span>
              </div>
            </button>
            <button
              onClick={() => setActiveTab('ai')}
              className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors duration-200 ${
                activeTab === 'ai'
                  ? 'border-purple-500 text-purple-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <div className="flex items-center space-x-2">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                </svg>
                <span>AI Generated ({aiTrips.length})</span>
              </div>
            </button>
          </nav>
        </div>
      </div>

      {/* Tab Content */}
      {activeTab === 'manual' ? (
        manualTrips.length === 0 ? (
          renderEmptyState(true)
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {manualTrips.map((trip) => renderTripCard(trip, true))}
          </div>
        )
      ) : (
        aiTrips.length === 0 ? (
          renderEmptyState(false)
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {aiTrips.map((trip) => renderTripCard(trip, false))}
          </div>
        )
      )}
    </div>
  );
}
